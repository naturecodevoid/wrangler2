import type { Config } from "../config";
import type { WorkerRegistry } from "../dev-registry";
import type { Entry } from "../entry";
import type { CfModule } from "../worker";
import type { Metafile, Plugin } from "esbuild";
export declare type EsbuildBundle = {
    id: number;
    path: string;
    entry: Entry;
    type: "esm" | "commonjs";
    modules: CfModule[];
    dependencies: Metafile["outputs"][string]["inputs"];
    sourceMapPath: string | undefined;
};
export declare function useEsbuild({ entry, destination, jsxFactory, jsxFragment, rules, assets, serveAssetsFromWorker, tsconfig, minify, legacyNodeCompat, nodejsCompat, betaD1Shims, define, noBundle, workerDefinitions, services, durableObjects, firstPartyWorkerDevFacade, local, targetConsumer, testScheduled, experimentalLocal, plugins, }: {
    entry: Entry;
    destination: string | undefined;
    jsxFactory: string | undefined;
    jsxFragment: string | undefined;
    rules: Config["rules"];
    assets: Config["assets"];
    define: Config["define"];
    services: Config["services"];
    serveAssetsFromWorker: boolean;
    tsconfig: string | undefined;
    minify: boolean | undefined;
    legacyNodeCompat: boolean | undefined;
    nodejsCompat: boolean | undefined;
    betaD1Shims?: string[];
    noBundle: boolean;
    workerDefinitions: WorkerRegistry;
    durableObjects: Config["durable_objects"];
    firstPartyWorkerDevFacade: boolean | undefined;
    local: boolean;
    targetConsumer: "dev" | "publish";
    testScheduled: boolean;
    experimentalLocal: boolean | undefined;
    plugins: Plugin[] | undefined;
}): EsbuildBundle | undefined;
